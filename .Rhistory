install.packages('slidify')
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(devtools)
install_github('ramanathv/slidify')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl("R Programming")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
d = 3L
d
class(D)
class(d)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(1)
h(2)
h(3)
h(4)
h(5)
library(datasets)
data(iris)
?iris
summary(iris)
iris
iris$Species
iris[iris$Species="virginica"]
iris[iris$Species=="virginica"]
iris["virginica"]
str(iris)
iris$Species = "virginica"
iris
data(iris)
iris
use = iris$Species == "virginica"
iris[use]
iris[use,]
mean(iris[use,])
mean(iris[use,1])
mean(iris[use,"Sepal.Length"])
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl),mean)
x = sapply(split(mtcars$hp, mtcars$cyl),mean)
x[3] - x[1]
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv,stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux_gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange ( cran2 , country , desc(r_version) , ip_id)
cran3 <- select(cran , ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran , avg_bytes = mean(size))
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
biocLite("EBImage")
library(EBImage)
?EBImage
browseVignettes("EBImage")
ei = readImage(system.file('images', 'shapes.png', package='EBImage'))
ei = ei[110:512,1:130]
display(ei)
flo = makeBrush(21, shape='disc', step=FALSE)^2
flo = flo/sum(flo)
f = system.file("images", "sample.png", package="EBImage")
img = readImage(f)
display(img)
imgflo = filter2(imgc, flo)
setwd("/Volumes/Coursera/datasci/courses/03_GettingData/course_project/r_script/getting_data_course_proj")
